//poj 1113

#include <iostream>
#include <algorithm>
#include <cstdio>
#include <vector>
#include <cmath>

using namespace std;

#define PI  acos(-1.00)

struct point{

     int  x;

     int  y;

    bool operator < (const point &p) const{

    return x<p.x || (x==p.x && y<p.y);
    }


};

// return negative if oab makes a clockwise turn
// other wise >=0

 int  cross(point O , point A, point B)
{
  return (A.x - O.x) * (B.y - O.y) - (A.y - O.y) * (B.x - O.x);
}

// Returns a list of points on the convex hull in counter-clockwise order.
// Note: the last point in the returned list is the same as the first one.


vector <point> convex_hull(vector <point> P)
{
    int n = P.size() , k=0;


    vector <point> H(2*n);
     // Sort points lexicographically
    sort ( P.begin(),P.end());

    // Build lower hull

    for(int i=0 ; i<n;i++)
    {
        while(k>=2 && cross(H[k-2],H[k-1],P[i]) <= 0) k--;

        H[k++] = P[i] ;
    }


    //build upper bound

    for (int i = n-2 , t = k+1; i>=0 ; i--)
    {
        while(k>=t && cross(H[k-2],H[k-1],P[i]) <= 0) k--;

        H[k++] = P[i] ;
    }



    H.resize(k-1);

    return H;


}

double dist(point a , point b)
{
    return sqrt((a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y));
}

int main()
{
   int N , L;

   while(scanf("%d %d",&N,&L)==2)
   {
       vector <point> castle ,hull;

       double ans = 0.0;

       point p;

       while(N--)
       {
           scanf("%d %d",&p.x , &p.y);

           castle.push_back(p);
       }


       hull = convex_hull( castle );

      // cout<<hull.size()<<endl;

       for(int i=0 ; i<hull.size()-1;i++)
       {
           ans += dist(hull[i],hull[i+1]);

            //cout<<ans<<endl;

        }

       ans += 2*PI*L + 0.5;

       ans += dist(hull[0],hull[hull.size()-1]);

       int x = ans;

       printf("%d\n",x);
   }
}
